{"version":3,"sources":["../../src/core/RXPicker.js"],"names":["React","Component","StyleSheet","View","Text","TouchableOpacity","PropTypes","element","RXPickerStyle","RXScrollPicker","RXPicker","constructor","props","dismiss","onConfirm","renderButton","title","index","leftStyle","rightStyle","style","styles","btnLeftBar","concat","btnRightBar","render","headerView","leftTitle","rightTitle","titleStyle","LineSeparatorStyle","other","tabBarView","isValidElement","store","text","titleText","container","height","backgroundColor","propTypes","any","string","object","onCancel","func","defaultProps","e","create","width","alignSelf","justifyContent","alignItems","flexDirection","fontSize","color","paddingHorizontal","flex","textAlign"],"mappings":"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","file":"RXPicker.js","sourcesContent":["/**\n *\n *\n * @flow\n */\n'use strict'\nimport React, { Component } from 'react';\nimport {\n  StyleSheet,\n  View,\n  Text,\n  TouchableOpacity,\n} from 'react-native';\nimport PropTypes, { element } from 'prop-types';\nimport RXPickerStyle from './RXPickerStyle'\nimport RXScrollPicker from './RXScrollPicker';\n\nexport default class RXPicker extends Component {\n  static propTypes = {\n    ...RXScrollPicker.propTypes,\n    headerView: PropTypes.any,\n    title: PropTypes.string,\n    titleStyle: PropTypes.object, // TextPropTypes.style 需要 react-native-web 支持，故使用object\n    leftTitle: PropTypes.string,\n    leftStyle: PropTypes.object,  // TextPropTypes.style 需要 react-native-web 支持，故使用object\n    rightTitle: PropTypes.string,\n    rightStyle: PropTypes.object, // TextPropTypes.style 需要 react-native-web 支持，故使用object\n    LineSeparatorStyle: PropTypes.object, // TextPropTypes.style 需要 react-native-web 支持，故使用object\n    onCancel: PropTypes.func,\n    onConfirm: PropTypes.func,\n  }\n  static defaultProps = {\n    ...RXScrollPicker.defaultProps,\n    headerView: null,\n    dismiss: (e) => { },\n    onConfirm: (e) => { },\n  }\n\n  constructor(props) {\n    super(props);\n  }\n\n  dismiss = () => {\n    const { dismiss } = this.props;\n    dismiss && dismiss();\n  }\n\n  onConfirm = () => {\n    const { onConfirm } = this.props;\n    onConfirm && onConfirm();\n  }\n\n  renderButton(title = '', index = 0) {\n    let { leftStyle, rightStyle } = this.props;\n    var style = {};\n    if (index === 0) {\n      style = [styles.btnLeftBar].concat(leftStyle);\n    } else {\n      style = [styles.btnRightBar].concat(rightStyle);\n    }\n    return (\n      <TouchableOpacity activeOpacity={0.5} onPress={() => { index ? this.onConfirm() : this.dismiss() }}>\n        <Text style={style}>{title}</Text>\n      </TouchableOpacity>\n    )\n  }\n\n  render() {\n    const { style, headerView, leftTitle, rightTitle, title, titleStyle, LineSeparatorStyle, ...other } = this.props;\n\n    let tabBarView = headerView\n    if (!tabBarView || !(tabBarView && React.isValidElement(tabBarView))) {\n      tabBarView = (\n        <View style={styles.tabBarView}>\n          {this.renderButton(leftTitle ? leftTitle : RXPickerStyle.store.btnLeftBar.text, 0)}\n          <Text style={[styles.titleText, titleStyle]}>{title ? title : RXPickerStyle.store.titleText.text}</Text>\n          {this.renderButton(rightTitle ? rightTitle : RXPickerStyle.store.btnRightBar.text, 1)}\n        </View>\n      )\n    }\n\n    return (\n      <View style={[styles.container, style]}>\n        {tabBarView}\n        <View style={[{ height: 1, backgroundColor: '#f0ebeb' }, LineSeparatorStyle]} />\n        <RXScrollPicker {...other} />\n      </View>\n    )\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    width: RXPickerStyle.store.container.width,\n    alignSelf: 'center',\n  },\n  tabBarView: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    flexDirection: 'row',\n    height: RXPickerStyle.store.tabBarView.height,\n  },\n  btnLeftBar: {\n    fontSize: RXPickerStyle.store.btnLeftBar.fontSize,\n    color: RXPickerStyle.store.btnLeftBar.color,\n    paddingHorizontal: RXPickerStyle.store.btnLeftBar.paddingHorizontal,\n  },\n  btnRightBar: {\n    fontSize: RXPickerStyle.store.btnRightBar.fontSize,\n    color: RXPickerStyle.store.btnRightBar.color,\n    paddingHorizontal: RXPickerStyle.store.btnRightBar.paddingHorizontal,\n  },\n  titleText: {\n    flex: 1,\n    textAlign: RXPickerStyle.store.titleText.textAlign,\n    fontSize: RXPickerStyle.store.titleText.fontSize,\n    color: RXPickerStyle.store.titleText.color,\n  },\n});"]}